{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findbyTitle = exports.findTitre = exports.findAllCount = exports.findAll = exports.create = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _config = _interopRequireDefault(require(\"../config\"));\n\nvar _user = require(\"../helper/user.storage\");\n\nvar film = _config.default.film;\n\nvar findAll = function findAll() {\n  var user, data, json;\n  return _regenerator.default.async(function findAll$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regenerator.default.awrap((0, _user.getUserStorage)());\n\n        case 3:\n          user = _context.sent;\n          _context.next = 6;\n          return _regenerator.default.awrap(fetch(\"http://localhost:8080/api/film/all?userId=\" + user.id, {\n            method: 'GET',\n            credentials: 'include',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }));\n\n        case 6:\n          data = _context.sent;\n          _context.next = 9;\n          return _regenerator.default.awrap(data.json());\n\n        case 9:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 13]], Promise);\n};\n\nexports.findAll = findAll;\n\nvar findAllCount = function findAllCount(_ref) {\n  var pageParam, user, data, json;\n  return _regenerator.default.async(function findAllCount$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          pageParam = _ref.pageParam;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return _regenerator.default.awrap((0, _user.getUserStorage)());\n\n        case 4:\n          user = _context2.sent;\n          _context2.next = 7;\n          return _regenerator.default.awrap(fetch(film.url + (\"/?page=\" + page + \"&size=\" + film.size + \"&userId=\" + user.id)));\n\n        case 7:\n          data = _context2.sent;\n          _context2.next = 10;\n          return _regenerator.default.awrap(data.json());\n\n        case 10:\n          json = _context2.sent;\n          console.log(json);\n          return _context2.abrupt(\"return\", json);\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(_context2.t0);\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 15]], Promise);\n};\n\nexports.findAllCount = findAllCount;\n\nvar findbyTitle = function findbyTitle(title) {\n  var data, json;\n  return _regenerator.default.async(function findbyTitle$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regenerator.default.awrap(fetch(film.tmdb + (\"/?page=1&api_key=\" + film.apiKey + \"&language=\" + film.lang + \"&query=\" + title)));\n\n        case 3:\n          data = _context3.sent;\n          _context3.next = 6;\n          return _regenerator.default.awrap(data.json());\n\n        case 6:\n          json = _context3.sent;\n          return _context3.abrupt(\"return\", json);\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(error);\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\n\nexports.findbyTitle = findbyTitle;\n\nvar create = function create(item) {\n  var data, json;\n  return _regenerator.default.async(function create$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          console.log(item);\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regenerator.default.awrap(fetch(\"http://localhost:8080/api/film/\", {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n          }));\n\n        case 4:\n          data = _context4.sent;\n          _context4.next = 7;\n          return _regenerator.default.awrap(data.json());\n\n        case 7:\n          json = _context4.sent;\n          return _context4.abrupt(\"return\", json);\n\n        case 11:\n          _context4.prev = 11;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.log(_context4.t0);\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 11]], Promise);\n};\n\nexports.create = create;\n\nvar findTitre = function findTitre(titre) {\n  var data, json;\n  return _regenerator.default.async(function findTitre$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regenerator.default.awrap(fetch(\"\" + titre));\n\n        case 3:\n          data = _context5.sent;\n          _context5.next = 6;\n          return _regenerator.default.awrap(data.json());\n\n        case 6:\n          json = _context5.sent;\n          return _context5.abrupt(\"return\", json);\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(err);\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\n\nexports.findTitre = findTitre;","map":{"version":3,"sources":["/Users/evan/dev/react/react-native/default/src/service/film.service.js"],"names":["film","config","findAll","user","fetch","id","method","credentials","headers","Accept","data","json","console","log","findAllCount","pageParam","url","page","size","findbyTitle","title","tmdb","apiKey","lang","error","create","item","body","JSON","stringify","findTitre","titre","err"],"mappings":"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","sourcesContent":["import config from \"../config\";\nimport { getUserStorage } from \"../helper/user.storage\";\nconst {film} = config;\n\nexport const findAll = async () =>{\n    \n    try{\n        const user = await getUserStorage()\n        const data = await fetch(`http://localhost:8080/api/film/all?userId=${user.id}`,{\n            method: 'GET',\n            credentials: 'include',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n            }\n        });\n        const json = await data.json();\n        return json\n    }catch(err){\n        console.log(err)\n    }\n}\n\nexport const findAllCount = async ({pageParam }) =>{\n    try {\n        const user = await getUserStorage();\n        const data = await fetch(film.url + `/?page=${page}&size=${film.size}&userId=${user.id}`)\n        const json = await data.json();\n        console.log(json)\n        return json;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const findbyTitle = async (title) =>{\n    try{\n        const data = await fetch(film.tmdb + `/?page=1&api_key=${film.apiKey}&language=${film.lang}&query=${title}`)\n        const json = await data.json();\n        return json;\n    }catch{\n        console.log(error)\n    }\n}\n\nexport const create = async(item) =>{\n    console.log(item)\n    try{\n        const data = await fetch(\"http://localhost:8080/api/film/\",{\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n        });\n        const json = await data.json();\n        return json\n    }catch(err){\n        console.log(err)\n    }\n}\n\nexport const findTitre = async (titre) =>{\n\n    try {\n        const data = await fetch(\"\" + titre);\n        const json = await data.json();\n        return json\n    } catch (error) {\n        console.log(err)\n    }\n}"]},"metadata":{},"sourceType":"script"}