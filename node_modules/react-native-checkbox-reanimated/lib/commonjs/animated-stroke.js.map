{"version":3,"sources":["animated-stroke.tsx"],"names":["AnimatedPath","Animated","createAnimatedComponent","Path","AnimatedStroke","progress","pathProps","length","setLength","ref","animatedProps","strokeDashoffset","Math","max","Easing","bezier","value","current","getTotalLength"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAMA,MAAMA,YAAY,GAAGC,+BAASC,uBAAT,CAAiCC,oBAAjC,CAArB;;AAEA,MAAMC,cAAc,GAAG,QAAqD;AAAA,MAApD;AAAEC,IAAAA,QAAF;AAAY,OAAGC;AAAf,GAAoD;AAC1E,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB,qBAAS,CAAT,CAA5B;AACA,QAAMC,GAAG,GAAG,mBAA4B,IAA5B,CAAZ;AACA,QAAMC,aAAa,GAAG,6CAAiB,OAAO;AAC5CC,IAAAA,gBAAgB,EAAEC,IAAI,CAACC,GAAL,CAChB,CADgB,EAEhBN,MAAM,GAAGA,MAAM,GAAGO,8BAAOC,MAAP,CAAc,IAAd,EAAoB,CAApB,EAAuB,IAAvB,EAA6B,CAA7B,EAAgCV,QAAQ,CAACW,KAAzC,CAAlB,GAAoE,GAFpD;AAD0B,GAAP,CAAjB,CAAtB;AAOA,sBACE,6BAAC,YAAD;AACE,IAAA,aAAa,EAAEN,aADjB,CAEE;AAFF;AAGE,IAAA,QAAQ,EAAE,MAAMF,SAAS,CAACC,GAAG,CAACQ,OAAJ,CAAaC,cAAb,EAAD,CAH3B,CAIE;AAJF;AAKE,IAAA,GAAG,EAAET,GALP;AAME,IAAA,eAAe,EAAEF;AANnB,KAOMD,SAPN,EADF;AAWD,CArBD;;eAuBeF,c","sourcesContent":["import React, { useRef, useState } from 'react'\nimport Animated, { Easing, useAnimatedProps } from 'react-native-reanimated'\nimport { Path, PathProps } from 'react-native-svg'\n\ninterface AnimatedStrokeProps extends PathProps {\n  progress: Animated.SharedValue<number>\n}\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path)\n\nconst AnimatedStroke = ({ progress, ...pathProps }: AnimatedStrokeProps) => {\n  const [length, setLength] = useState(0)\n  const ref = useRef<typeof AnimatedPath>(null)\n  const animatedProps = useAnimatedProps(() => ({\n    strokeDashoffset: Math.max(\n      0,\n      length - length * Easing.bezier(0.37, 0, 0.63, 1)(progress.value) - 0.1\n    )\n  }))\n\n  return (\n    <AnimatedPath\n      animatedProps={animatedProps}\n      // @ts-ignore\n      onLayout={() => setLength(ref.current!.getTotalLength())}\n      // @ts-ignore\n      ref={ref}\n      strokeDasharray={length}\n      {...pathProps}\n    />\n  )\n}\n\nexport default AnimatedStroke\n"]}