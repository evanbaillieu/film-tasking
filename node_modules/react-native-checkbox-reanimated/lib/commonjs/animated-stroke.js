"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _reactNativeSvg = require("react-native-svg");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const AnimatedPath = _reactNativeReanimated.default.createAnimatedComponent(_reactNativeSvg.Path);

const AnimatedStroke = _ref => {
  let {
    progress,
    ...pathProps
  } = _ref;
  const [length, setLength] = (0, _react.useState)(0);
  const ref = (0, _react.useRef)(null);
  const animatedProps = (0, _reactNativeReanimated.useAnimatedProps)(() => ({
    strokeDashoffset: Math.max(0, length - length * _reactNativeReanimated.Easing.bezier(0.37, 0, 0.63, 1)(progress.value) - 0.1)
  }));
  return /*#__PURE__*/_react.default.createElement(AnimatedPath, _extends({
    animatedProps: animatedProps // @ts-ignore
    ,
    onLayout: () => setLength(ref.current.getTotalLength()) // @ts-ignore
    ,
    ref: ref,
    strokeDasharray: length
  }, pathProps));
};

var _default = AnimatedStroke;
exports.default = _default;
//# sourceMappingURL=animated-stroke.js.map