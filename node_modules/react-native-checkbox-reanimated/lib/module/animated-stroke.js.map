{"version":3,"sources":["animated-stroke.tsx"],"names":["React","useRef","useState","Animated","Easing","useAnimatedProps","Path","AnimatedPath","createAnimatedComponent","AnimatedStroke","progress","pathProps","length","setLength","ref","animatedProps","strokeDashoffset","Math","max","bezier","value","current","getTotalLength"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,QAAP,IAAmBC,MAAnB,EAA2BC,gBAA3B,QAAmD,yBAAnD;AACA,SAASC,IAAT,QAAgC,kBAAhC;AAMA,MAAMC,YAAY,GAAGJ,QAAQ,CAACK,uBAAT,CAAiCF,IAAjC,CAArB;;AAEA,MAAMG,cAAc,GAAG,QAAqD;AAAA,MAApD;AAAEC,IAAAA,QAAF;AAAY,OAAGC;AAAf,GAAoD;AAC1E,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,CAAD,CAApC;AACA,QAAMY,GAAG,GAAGb,MAAM,CAAsB,IAAtB,CAAlB;AACA,QAAMc,aAAa,GAAGV,gBAAgB,CAAC,OAAO;AAC5CW,IAAAA,gBAAgB,EAAEC,IAAI,CAACC,GAAL,CAChB,CADgB,EAEhBN,MAAM,GAAGA,MAAM,GAAGR,MAAM,CAACe,MAAP,CAAc,IAAd,EAAoB,CAApB,EAAuB,IAAvB,EAA6B,CAA7B,EAAgCT,QAAQ,CAACU,KAAzC,CAAlB,GAAoE,GAFpD;AAD0B,GAAP,CAAD,CAAtC;AAOA,sBACE,oBAAC,YAAD;AACE,IAAA,aAAa,EAAEL,aADjB,CAEE;AAFF;AAGE,IAAA,QAAQ,EAAE,MAAMF,SAAS,CAACC,GAAG,CAACO,OAAJ,CAAaC,cAAb,EAAD,CAH3B,CAIE;AAJF;AAKE,IAAA,GAAG,EAAER,GALP;AAME,IAAA,eAAe,EAAEF;AANnB,KAOMD,SAPN,EADF;AAWD,CArBD;;AAuBA,eAAeF,cAAf","sourcesContent":["import React, { useRef, useState } from 'react'\nimport Animated, { Easing, useAnimatedProps } from 'react-native-reanimated'\nimport { Path, PathProps } from 'react-native-svg'\n\ninterface AnimatedStrokeProps extends PathProps {\n  progress: Animated.SharedValue<number>\n}\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path)\n\nconst AnimatedStroke = ({ progress, ...pathProps }: AnimatedStrokeProps) => {\n  const [length, setLength] = useState(0)\n  const ref = useRef<typeof AnimatedPath>(null)\n  const animatedProps = useAnimatedProps(() => ({\n    strokeDashoffset: Math.max(\n      0,\n      length - length * Easing.bezier(0.37, 0, 0.63, 1)(progress.value) - 0.1\n    )\n  }))\n\n  return (\n    <AnimatedPath\n      animatedProps={animatedProps}\n      // @ts-ignore\n      onLayout={() => setLength(ref.current!.getTotalLength())}\n      // @ts-ignore\n      ref={ref}\n      strokeDasharray={length}\n      {...pathProps}\n    />\n  )\n}\n\nexport default AnimatedStroke\n"]}