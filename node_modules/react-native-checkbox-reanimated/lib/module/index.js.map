{"version":3,"sources":["index.tsx"],"names":["React","useEffect","Animated","Easing","useSharedValue","useAnimatedProps","withTiming","interpolateColor","Svg","Path","Defs","ClipPath","G","AnimatedStroke","MARGIN","vWidth","vHeight","checkMarkPath","outlineBoxPath","AnimatedPath","createAnimatedComponent","AnimatedCheckbox","props","checked","checkmarkColor","highlightColor","boxOutlineColor","progress","value","duration","easing","linear","animatedBoxProps","stroke","bezier","fill","join"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport Animated, {\n  Easing,\n  useSharedValue,\n  useAnimatedProps,\n  withTiming,\n  interpolateColor\n} from 'react-native-reanimated'\nimport Svg, { Path, Defs, ClipPath, G } from 'react-native-svg'\nimport AnimatedStroke from './animated-stroke'\n\nconst MARGIN = 10\nconst vWidth = 64 + MARGIN\nconst vHeight = 64 + MARGIN\nconst checkMarkPath =\n  'M15 31.1977C23.1081 36.4884 29.5946 43 29.5946 43C29.5946 43 37.5 25.5 69 1.5'\nconst outlineBoxPath =\n  'M24 0.5H40C48.5809 0.5 54.4147 2.18067 58.117 5.88299C61.8193 9.58532 63.5 15.4191 63.5 24V40C63.5 48.5809 61.8193 54.4147 58.117 58.117C54.4147 61.8193 48.5809 63.5 40 63.5H24C15.4191 63.5 9.58532 61.8193 5.88299 58.117C2.18067 54.4147 0.5 48.5809 0.5 40V24C0.5 15.4191 2.18067 9.58532 5.88299 5.88299C9.58532 2.18067 15.4191 0.5 24 0.5Z'\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path)\n\ninterface Props {\n  checked?: boolean\n  highlightColor: string\n  checkmarkColor: string\n  boxOutlineColor: string\n}\n\nconst AnimatedCheckbox = (props: Props) => {\n  const { checked, checkmarkColor, highlightColor, boxOutlineColor } = props\n\n  const progress = useSharedValue(0)\n\n  useEffect(() => {\n    progress.value = withTiming(checked ? 1 : 0, {\n      duration: checked ? 300 : 100,\n      easing: Easing.linear\n    })\n  }, [checked])\n\n  const animatedBoxProps = useAnimatedProps(\n    () => ({\n      stroke: interpolateColor(\n        Easing.bezier(0.16, 1, 0.3, 1)(progress.value),\n        [0, 1],\n        [boxOutlineColor, highlightColor],\n        'RGB'\n      ),\n      fill: interpolateColor(\n        Easing.bezier(0.16, 1, 0.3, 1)(progress.value),\n        [0, 1],\n        ['#00000000', highlightColor],\n        'RGB'\n      )\n    }),\n    [highlightColor, boxOutlineColor]\n  )\n\n  return (\n    <Svg\n      viewBox={[-MARGIN, -MARGIN, vWidth + MARGIN, vHeight + MARGIN].join(' ')}\n    >\n      <Defs>\n        <ClipPath id=\"clipPath\">\n          <Path\n            fill=\"white\"\n            stroke=\"gray\"\n            strokeLinejoin=\"round\"\n            strokeLinecap=\"round\"\n            d={outlineBoxPath}\n          />\n        </ClipPath>\n      </Defs>\n      <AnimatedStroke\n        progress={progress}\n        d={checkMarkPath}\n        stroke={highlightColor}\n        strokeWidth={10}\n        strokeLinejoin=\"round\"\n        strokeLinecap=\"round\"\n        strokeOpacity={checked || false ? 1 : 0}\n      />\n      <AnimatedPath\n        d={outlineBoxPath}\n        strokeWidth={7}\n        strokeLinejoin=\"round\"\n        strokeLinecap=\"round\"\n        animatedProps={animatedBoxProps}\n      />\n      <G clipPath=\"url(#clipPath)\">\n        <AnimatedStroke\n          progress={progress}\n          d={checkMarkPath}\n          stroke={checkmarkColor}\n          strokeWidth={10}\n          strokeLinejoin=\"round\"\n          strokeLinecap=\"round\"\n          strokeOpacity={checked || false ? 1 : 0}\n        />\n      </G>\n    </Svg>\n  )\n}\n\nexport default AnimatedCheckbox\n"]}