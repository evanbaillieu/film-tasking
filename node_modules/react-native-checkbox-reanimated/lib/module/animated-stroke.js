function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useRef, useState } from 'react';
import Animated, { Easing, useAnimatedProps } from 'react-native-reanimated';
import { Path } from 'react-native-svg';
const AnimatedPath = Animated.createAnimatedComponent(Path);

const AnimatedStroke = _ref => {
  let {
    progress,
    ...pathProps
  } = _ref;
  const [length, setLength] = useState(0);
  const ref = useRef(null);
  const animatedProps = useAnimatedProps(() => ({
    strokeDashoffset: Math.max(0, length - length * Easing.bezier(0.37, 0, 0.63, 1)(progress.value) - 0.1)
  }));
  return /*#__PURE__*/React.createElement(AnimatedPath, _extends({
    animatedProps: animatedProps // @ts-ignore
    ,
    onLayout: () => setLength(ref.current.getTotalLength()) // @ts-ignore
    ,
    ref: ref,
    strokeDasharray: length
  }, pathProps));
};

export default AnimatedStroke;
//# sourceMappingURL=animated-stroke.js.map